
10.7 Model / View / Controller

A typical application can have hundreds of different classes or modules and hundreds of thousands of lines of code. If code needs to be changed, it can be very difficult to find which class to make the change in. For this reason, developers have come up with an organization for all this code. The Model/View/Controller architecture draws boundaries between different sections of an application. These boundaries tell us where to put the code that  implements logically different functionality for our program.

The MODEL contains the business logic and the data that the application collects and manipulates. The VIEW is the user interface, and it might be specific to a mobile handset, a simple text console, or a tkinter.Frame. The CONTROLLER sews together the Model and the View, since the goal is to have the Model and the View completely independent of one another.

This may seem like a lot of work, but the benefits abound:

-When you port your application to a different device (like a smart phone),  you should have to change just the View, the Model should remain unchanged.

-If your database grows to the point where you need to use a different database management system, you should have to change just the Model, the View should remain unchanged.

-If testing reveals a bug in the UI, you know that you can restrict your search for it to the View. If there is a bug in the business logic, you can restrict your search for it to the Model.

-Development teams can more easily delegate individual tasks that team members can complete independently. Once the team collaborates on the Controller, there is no need for extensive team communication.

Our simple counter application from the previous section can be split up into three classes: the Model has the counter in it, the View is a subclass of tkinter.Frame with two Buttons and Label in it, and the Controller handles all the communication between the Model and the View. The way to check if a set of classes follows the Model/View/Controller architecture is to see that the Model doesn't contain a reference to the View, and the View doesn't contain a reference to the Model.

The big change here (from the previous section) is that the command for the incrementButton is now set to call a method in the Controller called "buttonPressed()". The Controller.buttonPressed() method in turn calls a method in the Counter class. Keep in mind that usually the Model will not be so simple, it may contain a whole database or many complex mathematical calculations. That's why we want the Model to have its own class.

You will find the source code for these three classes attached to the next section of this Module.

class Counter:

"""
class Counter is the MODEL for a simple program that exemplifies the Model/View/Controller architecture. It just maintains a counter that starts at 0 and is incremented each time the inc() method is called.

In a real MVC app, the Model would contain all the business logic. Note that the Model never contains a reference to the View.
"""

    def __init__(self):
        self.counter = 0

    def inc(self):
        self.counter = self.counter+1

    def __str__(self):
        return str(self.counter)

_______________________________________________________________________

import tkinter

class MyFrame(tkinter.Frame):

"""
class MyFrame is the VIEW for a simple program that exemplifies the Model/View/Controller architecture. This View class is a tkinter.Frame that contains two Buttons and a Label. One Button increments a counter and the other Button quits. The Label displays the current value of the counter. Notice that the View never contains a reference to the Model, but it does contain a reference to the Controller.
"""

    def __init__(self, controller):
        tkinter.Frame.__init__(self)
        self.pack()
        self.controller = controller    # saves a reference to the controller so that we can call methods
                                        # on the controller object when the user generates events      
        self.incrementButton = tkinter.Button(self)
        self.incrementButton["text"] = "Increment"
        self.incrementButton["command"] = self.controller.buttonPressed
        self.incrementButton.pack({"side": "left"})

        self.labelForOutput = tkinter.Label(self)
        self.labelForOutput["text"] = 0
        self.labelForOutput.pack({"side": "left"})

        self.quitButton = tkinter.Button(self)
        self.quitButton["text"] = "Quit"
        self.quitButton["command"] =  self.quit
        self.quitButton.pack({"side": "left"})

_______________________________________________________________________

import tkinter
import myFrame    # the VIEW
import counter    # the MODEL

class Controller:

"""
The CONTROLLER for an app that follows the Model/View/Controller architecture. When the user presses a Button on the View, this Controller calls the appropriate methods in the Model. The Controller handles all communication between the Model and the View.
"""

    def __init__(self):

"""  
This starts the Tk framework up, instantiates the Model (a Counter object), instantiates the View (a MyFrame object), and starts the event loop that waits for the user to press a Button on the View.
"""

        root = tkinter.Tk()
        self.model = counter.Counter()       
        self.view = myFrame.MyFrame(self)
        self.view.mainloop()
        root.destroy()

    def buttonPressed(self):

"""
Python calls this method when the user presses the incrementButton in the View.
"""
self.model.inc()
self.view.labelForOutput["text"] = str(self.model)       

if __name__ == "__main__":
    c = Controller()

Notes:

-These three classes are in three separate files, attached to the next section.

-Execution starts with the code directly above. Execution ends when the user clicks the quitButton.

-The Controller must send a reference to itself when it instantiates the View, and the View must store that reference to the Controller so that it can call a method in the Controller when the user clicks the incrementButton.

-Typically the Model and the View are each comprised of many classes. The Controller is usually quite small since it really just passes messages around and doesn't do any real work.

-This M/V/C architecture came into vogue with object-oriented programming. It is used almost exclusively with GUI and Object-oriented projects in many different object-oriented programming languages.

QUESTION:

Add a decrement Button to the application that is attached to this Etudes module. When the user clicks the decrement Button, the counter displayed in the  labelForOutput will go down by one. You will have to make a change to all three classes (MyFrame, Counter and Controller) in order to maintain the M/V/C architecture.

 

Copyright Â© ,
